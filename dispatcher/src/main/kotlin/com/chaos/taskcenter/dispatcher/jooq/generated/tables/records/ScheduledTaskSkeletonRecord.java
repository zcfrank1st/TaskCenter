/*
 * This file is generated by jOOQ.
*/
package com.chaos.taskcenter.dispatcher.jooq.generated.tables.records;


import com.chaos.taskcenter.dispatcher.jooq.generated.tables.ScheduledTaskSkeleton;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record13;
import org.jooq.Row13;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ScheduledTaskSkeletonRecord extends UpdatableRecordImpl<ScheduledTaskSkeletonRecord> implements Record13<UInteger, String, String, String, String, Byte, UInteger, UInteger, Timestamp, Timestamp, Timestamp, String, String> {

    private static final long serialVersionUID = -515156364;

    /**
     * Setter for <code>task_center.scheduled_task_skeleton.task_id</code>.
     */
    public void setTaskId(UInteger value) {
        set(0, value);
    }

    /**
     * Getter for <code>task_center.scheduled_task_skeleton.task_id</code>.
     */
    public UInteger getTaskId() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>task_center.scheduled_task_skeleton.taskName</code>.
     */
    public void setTaskname(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>task_center.scheduled_task_skeleton.taskName</code>.
     */
    public String getTaskname() {
        return (String) get(1);
    }

    /**
     * Setter for <code>task_center.scheduled_task_skeleton.quartz_expression</code>.
     */
    public void setQuartzExpression(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>task_center.scheduled_task_skeleton.quartz_expression</code>.
     */
    public String getQuartzExpression() {
        return (String) get(2);
    }

    /**
     * Setter for <code>task_center.scheduled_task_skeleton.task_content</code>.
     */
    public void setTaskContent(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>task_center.scheduled_task_skeleton.task_content</code>.
     */
    public String getTaskContent() {
        return (String) get(3);
    }

    /**
     * Setter for <code>task_center.scheduled_task_skeleton.param</code>.
     */
    public void setParam(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>task_center.scheduled_task_skeleton.param</code>.
     */
    public String getParam() {
        return (String) get(4);
    }

    /**
     * Setter for <code>task_center.scheduled_task_skeleton.task_type</code>.
     */
    public void setTaskType(Byte value) {
        set(5, value);
    }

    /**
     * Getter for <code>task_center.scheduled_task_skeleton.task_type</code>.
     */
    public Byte getTaskType() {
        return (Byte) get(5);
    }

    /**
     * Setter for <code>task_center.scheduled_task_skeleton.refer_task_id</code>.
     */
    public void setReferTaskId(UInteger value) {
        set(6, value);
    }

    /**
     * Getter for <code>task_center.scheduled_task_skeleton.refer_task_id</code>.
     */
    public UInteger getReferTaskId() {
        return (UInteger) get(6);
    }

    /**
     * Setter for <code>task_center.scheduled_task_skeleton.retry_time_threshold</code>.
     */
    public void setRetryTimeThreshold(UInteger value) {
        set(7, value);
    }

    /**
     * Getter for <code>task_center.scheduled_task_skeleton.retry_time_threshold</code>.
     */
    public UInteger getRetryTimeThreshold() {
        return (UInteger) get(7);
    }

    /**
     * Setter for <code>task_center.scheduled_task_skeleton.last_execute_time</code>.
     */
    public void setLastExecuteTime(Timestamp value) {
        set(8, value);
    }

    /**
     * Getter for <code>task_center.scheduled_task_skeleton.last_execute_time</code>.
     */
    public Timestamp getLastExecuteTime() {
        return (Timestamp) get(8);
    }

    /**
     * Setter for <code>task_center.scheduled_task_skeleton.create_time</code>.
     */
    public void setCreateTime(Timestamp value) {
        set(9, value);
    }

    /**
     * Getter for <code>task_center.scheduled_task_skeleton.create_time</code>.
     */
    public Timestamp getCreateTime() {
        return (Timestamp) get(9);
    }

    /**
     * Setter for <code>task_center.scheduled_task_skeleton.update_time</code>.
     */
    public void setUpdateTime(Timestamp value) {
        set(10, value);
    }

    /**
     * Getter for <code>task_center.scheduled_task_skeleton.update_time</code>.
     */
    public Timestamp getUpdateTime() {
        return (Timestamp) get(10);
    }

    /**
     * Setter for <code>task_center.scheduled_task_skeleton.create_user</code>.
     */
    public void setCreateUser(String value) {
        set(11, value);
    }

    /**
     * Getter for <code>task_center.scheduled_task_skeleton.create_user</code>.
     */
    public String getCreateUser() {
        return (String) get(11);
    }

    /**
     * Setter for <code>task_center.scheduled_task_skeleton.update_user</code>.
     */
    public void setUpdateUser(String value) {
        set(12, value);
    }

    /**
     * Getter for <code>task_center.scheduled_task_skeleton.update_user</code>.
     */
    public String getUpdateUser() {
        return (String) get(12);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<UInteger> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record13 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row13<UInteger, String, String, String, String, Byte, UInteger, UInteger, Timestamp, Timestamp, Timestamp, String, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row13<UInteger, String, String, String, String, Byte, UInteger, UInteger, Timestamp, Timestamp, Timestamp, String, String> valuesRow() {
        return (Row13) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UInteger> field1() {
        return ScheduledTaskSkeleton.SCHEDULED_TASK_SKELETON.TASK_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return ScheduledTaskSkeleton.SCHEDULED_TASK_SKELETON.TASKNAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return ScheduledTaskSkeleton.SCHEDULED_TASK_SKELETON.QUARTZ_EXPRESSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return ScheduledTaskSkeleton.SCHEDULED_TASK_SKELETON.TASK_CONTENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return ScheduledTaskSkeleton.SCHEDULED_TASK_SKELETON.PARAM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Byte> field6() {
        return ScheduledTaskSkeleton.SCHEDULED_TASK_SKELETON.TASK_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UInteger> field7() {
        return ScheduledTaskSkeleton.SCHEDULED_TASK_SKELETON.REFER_TASK_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UInteger> field8() {
        return ScheduledTaskSkeleton.SCHEDULED_TASK_SKELETON.RETRY_TIME_THRESHOLD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field9() {
        return ScheduledTaskSkeleton.SCHEDULED_TASK_SKELETON.LAST_EXECUTE_TIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field10() {
        return ScheduledTaskSkeleton.SCHEDULED_TASK_SKELETON.CREATE_TIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field11() {
        return ScheduledTaskSkeleton.SCHEDULED_TASK_SKELETON.UPDATE_TIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field12() {
        return ScheduledTaskSkeleton.SCHEDULED_TASK_SKELETON.CREATE_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field13() {
        return ScheduledTaskSkeleton.SCHEDULED_TASK_SKELETON.UPDATE_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger value1() {
        return getTaskId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getTaskname();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getQuartzExpression();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getTaskContent();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getParam();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte value6() {
        return getTaskType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger value7() {
        return getReferTaskId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger value8() {
        return getRetryTimeThreshold();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value9() {
        return getLastExecuteTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value10() {
        return getCreateTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value11() {
        return getUpdateTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value12() {
        return getCreateUser();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value13() {
        return getUpdateUser();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledTaskSkeletonRecord value1(UInteger value) {
        setTaskId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledTaskSkeletonRecord value2(String value) {
        setTaskname(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledTaskSkeletonRecord value3(String value) {
        setQuartzExpression(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledTaskSkeletonRecord value4(String value) {
        setTaskContent(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledTaskSkeletonRecord value5(String value) {
        setParam(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledTaskSkeletonRecord value6(Byte value) {
        setTaskType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledTaskSkeletonRecord value7(UInteger value) {
        setReferTaskId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledTaskSkeletonRecord value8(UInteger value) {
        setRetryTimeThreshold(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledTaskSkeletonRecord value9(Timestamp value) {
        setLastExecuteTime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledTaskSkeletonRecord value10(Timestamp value) {
        setCreateTime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledTaskSkeletonRecord value11(Timestamp value) {
        setUpdateTime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledTaskSkeletonRecord value12(String value) {
        setCreateUser(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledTaskSkeletonRecord value13(String value) {
        setUpdateUser(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledTaskSkeletonRecord values(UInteger value1, String value2, String value3, String value4, String value5, Byte value6, UInteger value7, UInteger value8, Timestamp value9, Timestamp value10, Timestamp value11, String value12, String value13) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ScheduledTaskSkeletonRecord
     */
    public ScheduledTaskSkeletonRecord() {
        super(ScheduledTaskSkeleton.SCHEDULED_TASK_SKELETON);
    }

    /**
     * Create a detached, initialised ScheduledTaskSkeletonRecord
     */
    public ScheduledTaskSkeletonRecord(UInteger taskId, String taskname, String quartzExpression, String taskContent, String param, Byte taskType, UInteger referTaskId, UInteger retryTimeThreshold, Timestamp lastExecuteTime, Timestamp createTime, Timestamp updateTime, String createUser, String updateUser) {
        super(ScheduledTaskSkeleton.SCHEDULED_TASK_SKELETON);

        set(0, taskId);
        set(1, taskname);
        set(2, quartzExpression);
        set(3, taskContent);
        set(4, param);
        set(5, taskType);
        set(6, referTaskId);
        set(7, retryTimeThreshold);
        set(8, lastExecuteTime);
        set(9, createTime);
        set(10, updateTime);
        set(11, createUser);
        set(12, updateUser);
    }
}
