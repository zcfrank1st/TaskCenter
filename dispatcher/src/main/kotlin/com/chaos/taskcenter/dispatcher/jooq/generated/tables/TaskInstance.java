/*
 * This file is generated by jOOQ.
*/
package com.chaos.taskcenter.dispatcher.jooq.generated.tables;


import com.chaos.taskcenter.dispatcher.jooq.generated.Keys;
import com.chaos.taskcenter.dispatcher.jooq.generated.TaskCenter;
import com.chaos.taskcenter.dispatcher.jooq.generated.tables.records.TaskInstanceRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskInstance extends TableImpl<TaskInstanceRecord> {

    private static final long serialVersionUID = -1666553392;

    /**
     * The reference instance of <code>task_center.task_instance</code>
     */
    public static final TaskInstance TASK_INSTANCE = new TaskInstance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskInstanceRecord> getRecordType() {
        return TaskInstanceRecord.class;
    }

    /**
     * The column <code>task_center.task_instance.task_instance_id</code>.
     */
    public final TableField<TaskInstanceRecord, String> TASK_INSTANCE_ID = createField("task_instance_id", org.jooq.impl.SQLDataType.VARCHAR.length(12).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>task_center.task_instance.task_id</code>.
     */
    public final TableField<TaskInstanceRecord, UInteger> TASK_ID = createField("task_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>task_center.task_instance.task_name</code>.
     */
    public final TableField<TaskInstanceRecord, String> TASK_NAME = createField("task_name", org.jooq.impl.SQLDataType.VARCHAR.length(256).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>task_center.task_instance.task_content</code>.
     */
    public final TableField<TaskInstanceRecord, String> TASK_CONTENT = createField("task_content", org.jooq.impl.SQLDataType.VARCHAR.length(512).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>task_center.task_instance.param</code>.
     */
    public final TableField<TaskInstanceRecord, String> PARAM = createField("param", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>task_center.task_instance.task_type</code>.
     */
    public final TableField<TaskInstanceRecord, UByte> TASK_TYPE = createField("task_type", org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>task_center.task_instance.refer_task_instance_id</code>.
     */
    public final TableField<TaskInstanceRecord, String> REFER_TASK_INSTANCE_ID = createField("refer_task_instance_id", org.jooq.impl.SQLDataType.VARCHAR.length(12), this, "");

    /**
     * The column <code>task_center.task_instance.retry_time_threshold</code>.
     */
    public final TableField<TaskInstanceRecord, UInteger> RETRY_TIME_THRESHOLD = createField("retry_time_threshold", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>task_center.task_instance.status</code>.
     */
    public final TableField<TaskInstanceRecord, UByte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINTUNSIGNED, this, "");

    /**
     * The column <code>task_center.task_instance.retry_times</code>.
     */
    public final TableField<TaskInstanceRecord, UInteger> RETRY_TIMES = createField("retry_times", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>task_center.task_instance.execute_time</code>.
     */
    public final TableField<TaskInstanceRecord, Timestamp> EXECUTE_TIME = createField("execute_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>task_center.task_instance.create_time</code>.
     */
    public final TableField<TaskInstanceRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>task_center.task_instance.update_time</code>.
     */
    public final TableField<TaskInstanceRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>task_center.task_instance</code> table reference
     */
    public TaskInstance() {
        this("task_instance", null);
    }

    /**
     * Create an aliased <code>task_center.task_instance</code> table reference
     */
    public TaskInstance(String alias) {
        this(alias, TASK_INSTANCE);
    }

    private TaskInstance(String alias, Table<TaskInstanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskInstance(String alias, Table<TaskInstanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return TaskCenter.TASK_CENTER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TaskInstanceRecord> getPrimaryKey() {
        return Keys.KEY_TASK_INSTANCE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TaskInstanceRecord>> getKeys() {
        return Arrays.<UniqueKey<TaskInstanceRecord>>asList(Keys.KEY_TASK_INSTANCE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TaskInstance as(String alias) {
        return new TaskInstance(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskInstance rename(String name) {
        return new TaskInstance(name, null);
    }
}
